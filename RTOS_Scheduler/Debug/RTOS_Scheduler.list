
RTOS_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000e78  08000e78  00001e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e88  08000e88  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  08000e88  08000e88  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e88  08000e88  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e88  08000e88  00001e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e8c  08000e8c  00001e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000e90  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000018  08000ea8  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000ea8  00002040  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000135a  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e2  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000730  00000000  00000000  0000397e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000040b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00004220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014f3  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001716  00000000  00000000  0000583b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005391  00000000  00000000  00006f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c2e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003fc  00000000  00000000  0000c328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e60 	.word	0x08000e60

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08000e60 	.word	0x08000e60

08000204 <GPIO_u8PinInit>:
};

/*************************************** Section : Functions Definitions ***************************************/


Std_ReturnType GPIO_u8PinInit(const GPIO_Pin_Config_t * PinConfig){
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	Std_ReturnType retVar = E_NOT_OK;
 800020c:	2301      	movs	r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]
	if(PinConfig == NULL_PTR ){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d102      	bne.n	800021c <GPIO_u8PinInit+0x18>
		retVar = E_NOT_OK;
 8000216:	2301      	movs	r3, #1
 8000218:	73fb      	strb	r3, [r7, #15]
 800021a:	e3e4      	b.n	80009e6 <GPIO_u8PinInit+0x7e2>
	}else if( (PinConfig->Port > PORTH )|| (PinConfig->Pin > PIN15 )){
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b07      	cmp	r3, #7
 8000222:	d803      	bhi.n	800022c <GPIO_u8PinInit+0x28>
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	785b      	ldrb	r3, [r3, #1]
 8000228:	2b0f      	cmp	r3, #15
 800022a:	d902      	bls.n	8000232 <GPIO_u8PinInit+0x2e>
		retVar = E_NOT_OK;
 800022c:	2301      	movs	r3, #1
 800022e:	73fb      	strb	r3, [r7, #15]
 8000230:	e3d9      	b.n	80009e6 <GPIO_u8PinInit+0x7e2>
	}else{
		switch(PinConfig->Port){
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b04      	cmp	r3, #4
 8000238:	f200 83c8 	bhi.w	80009cc <GPIO_u8PinInit+0x7c8>
 800023c:	a201      	add	r2, pc, #4	@ (adr r2, 8000244 <GPIO_u8PinInit+0x40>)
 800023e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000242:	bf00      	nop
 8000244:	08000259 	.word	0x08000259
 8000248:	080003d9 	.word	0x080003d9
 800024c:	08000559 	.word	0x08000559
 8000250:	080006d9 	.word	0x080006d9
 8000254:	08000859 	.word	0x08000859
			case PORTA:
				GPIOA_PCLK_EN();
 8000258:	4b5d      	ldr	r3, [pc, #372]	@ (80003d0 <GPIO_u8PinInit+0x1cc>)
 800025a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025c:	4a5c      	ldr	r2, [pc, #368]	@ (80003d0 <GPIO_u8PinInit+0x1cc>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6313      	str	r3, [r2, #48]	@ 0x30
				/*Clear the two bits in the MODER register then Set the new mode to the correct pin position*/
				GPIOA->MODER &= ~(0x3 << (PinConfig->Pin * 2));
 8000264:	4b5b      	ldr	r3, [pc, #364]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	7852      	ldrb	r2, [r2, #1]
 800026c:	0052      	lsls	r2, r2, #1
 800026e:	2103      	movs	r1, #3
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a56      	ldr	r2, [pc, #344]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 800027a:	400b      	ands	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= ( PinConfig->Mode << (PinConfig->Pin * 2 ));
 800027e:	4b55      	ldr	r3, [pc, #340]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	7892      	ldrb	r2, [r2, #2]
 8000286:	4611      	mov	r1, r2
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	7852      	ldrb	r2, [r2, #1]
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	4611      	mov	r1, r2
 8000294:	4a4f      	ldr	r2, [pc, #316]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000296:	430b      	orrs	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
			
				if(ANALOG != PinConfig->Mode){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d052      	beq.n	8000348 <GPIO_u8PinInit+0x144>
					if (INPUT != PinConfig->Mode)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	789b      	ldrb	r3, [r3, #2]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d033      	beq.n	8000312 <GPIO_u8PinInit+0x10e>
					{
						/* Configure Output Type (Push-Pull or Open-Drain) */
						GPIOA->OTYPER &= ~(1 << PinConfig->Pin);
 80002aa:	4b4a      	ldr	r3, [pc, #296]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	7852      	ldrb	r2, [r2, #1]
 80002b2:	4611      	mov	r1, r2
 80002b4:	2201      	movs	r2, #1
 80002b6:	408a      	lsls	r2, r1
 80002b8:	43d2      	mvns	r2, r2
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a45      	ldr	r2, [pc, #276]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80002be:	400b      	ands	r3, r1
 80002c0:	6053      	str	r3, [r2, #4]
						GPIOA->OTYPER |= (PinConfig->OutputType << PinConfig->Pin);
 80002c2:	4b44      	ldr	r3, [pc, #272]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	7912      	ldrb	r2, [r2, #4]
 80002ca:	4611      	mov	r1, r2
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	7852      	ldrb	r2, [r2, #1]
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	4611      	mov	r1, r2
 80002d6:	4a3f      	ldr	r2, [pc, #252]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80002d8:	430b      	orrs	r3, r1
 80002da:	6053      	str	r3, [r2, #4]
						/* Configure Output Speed (Low, Medium, High, or Very High)*/
						GPIOA->OSPEEDR &= ~(0x3 << (PinConfig->Pin * 2));
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	7852      	ldrb	r2, [r2, #1]
 80002e4:	0052      	lsls	r2, r2, #1
 80002e6:	2103      	movs	r1, #3
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	43d2      	mvns	r2, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80002f2:	400b      	ands	r3, r1
 80002f4:	6093      	str	r3, [r2, #8]
						GPIOA->OSPEEDR |= (PinConfig->Speed << (PinConfig->Pin * 2));
 80002f6:	4b37      	ldr	r3, [pc, #220]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	7952      	ldrb	r2, [r2, #5]
 80002fe:	4611      	mov	r1, r2
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	7852      	ldrb	r2, [r2, #1]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	4611      	mov	r1, r2
 800030c:	4a31      	ldr	r2, [pc, #196]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 800030e:	430b      	orrs	r3, r1
 8000310:	6093      	str	r3, [r2, #8]
					}
					/* Configure Pull-up/Pull-down (None, Pull-up, or Pull-down)*/
					GPIOA->PUPDR &= ~(0x3 << (PinConfig->Pin * 2));
 8000312:	4b30      	ldr	r3, [pc, #192]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	7852      	ldrb	r2, [r2, #1]
 800031a:	0052      	lsls	r2, r2, #1
 800031c:	2103      	movs	r1, #3
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	43d2      	mvns	r2, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a2b      	ldr	r2, [pc, #172]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000328:	400b      	ands	r3, r1
 800032a:	60d3      	str	r3, [r2, #12]
					GPIOA->PUPDR |= (PinConfig->PullType << (PinConfig->Pin * 2));
 800032c:	4b29      	ldr	r3, [pc, #164]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	78d2      	ldrb	r2, [r2, #3]
 8000334:	4611      	mov	r1, r2
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	7852      	ldrb	r2, [r2, #1]
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	fa01 f202 	lsl.w	r2, r1, r2
 8000340:	4611      	mov	r1, r2
 8000342:	4a24      	ldr	r2, [pc, #144]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000344:	430b      	orrs	r3, r1
 8000346:	60d3      	str	r3, [r2, #12]
				}
	            /* If Alternate Function is needed, configure it*/
	            if (PinConfig->Mode == ALTERNATE_FUNCTION) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	2b02      	cmp	r3, #2
 800034e:	f040 833f 	bne.w	80009d0 <GPIO_u8PinInit+0x7cc>
	                /* Alternate function register (AFR) is split into two registers
	                 * (AFRL and AFRH) for pins 0-7 and 8-15*/
	                if (PinConfig->Pin < 8){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	785b      	ldrb	r3, [r3, #1]
 8000356:	2b07      	cmp	r3, #7
 8000358:	d81b      	bhi.n	8000392 <GPIO_u8PinInit+0x18e>
	                    GPIOA->AFR[0] &= ~(0xF << (PinConfig->Pin * 4));
 800035a:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 800035c:	6a1b      	ldr	r3, [r3, #32]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	7852      	ldrb	r2, [r2, #1]
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	210f      	movs	r1, #15
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	43d2      	mvns	r2, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a19      	ldr	r2, [pc, #100]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000370:	400b      	ands	r3, r1
 8000372:	6213      	str	r3, [r2, #32]
	                    GPIOA->AFR[0] |= (PinConfig->AltFunc << (PinConfig->Pin * 4));
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	7992      	ldrb	r2, [r2, #6]
 800037c:	4611      	mov	r1, r2
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7852      	ldrb	r2, [r2, #1]
 8000382:	0092      	lsls	r2, r2, #2
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	4611      	mov	r1, r2
 800038a:	4a12      	ldr	r2, [pc, #72]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 800038c:	430b      	orrs	r3, r1
 800038e:	6213      	str	r3, [r2, #32]
	                } else{
	                    GPIOA->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
	                    GPIOA->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
	                }
	            }
				break;
 8000390:	e31e      	b.n	80009d0 <GPIO_u8PinInit+0x7cc>
	                    GPIOA->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 8000394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	7852      	ldrb	r2, [r2, #1]
 800039a:	3a08      	subs	r2, #8
 800039c:	0092      	lsls	r2, r2, #2
 800039e:	210f      	movs	r1, #15
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	4611      	mov	r1, r2
 80003a8:	4a0a      	ldr	r2, [pc, #40]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80003aa:	400b      	ands	r3, r1
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24
	                    GPIOA->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80003b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	7992      	ldrb	r2, [r2, #6]
 80003b6:	4611      	mov	r1, r2
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7852      	ldrb	r2, [r2, #1]
 80003bc:	3a08      	subs	r2, #8
 80003be:	0092      	lsls	r2, r2, #2
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a03      	ldr	r2, [pc, #12]	@ (80003d4 <GPIO_u8PinInit+0x1d0>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 80003cc:	e300      	b.n	80009d0 <GPIO_u8PinInit+0x7cc>
 80003ce:	bf00      	nop
 80003d0:	40023800 	.word	0x40023800
 80003d4:	40020000 	.word	0x40020000


			case PORTB:
				GPIOB_PCLK_EN();
 80003d8:	4b5d      	ldr	r3, [pc, #372]	@ (8000550 <GPIO_u8PinInit+0x34c>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a5c      	ldr	r2, [pc, #368]	@ (8000550 <GPIO_u8PinInit+0x34c>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
				/*Clear the two bits in the MODER register then Set the new mode to the correct pin position*/
				GPIOB->MODER &= ~(0x3 << (PinConfig->Pin * 2));
 80003e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7852      	ldrb	r2, [r2, #1]
 80003ec:	0052      	lsls	r2, r2, #1
 80003ee:	2103      	movs	r1, #3
 80003f0:	fa01 f202 	lsl.w	r2, r1, r2
 80003f4:	43d2      	mvns	r2, r2
 80003f6:	4611      	mov	r1, r2
 80003f8:	4a56      	ldr	r2, [pc, #344]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80003fa:	400b      	ands	r3, r1
 80003fc:	6013      	str	r3, [r2, #0]
				GPIOB->MODER |= ( PinConfig->Mode << (PinConfig->Pin * 2 ));
 80003fe:	4b55      	ldr	r3, [pc, #340]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7892      	ldrb	r2, [r2, #2]
 8000406:	4611      	mov	r1, r2
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	7852      	ldrb	r2, [r2, #1]
 800040c:	0052      	lsls	r2, r2, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a4f      	ldr	r2, [pc, #316]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6013      	str	r3, [r2, #0]
				if(ANALOG != PinConfig->Mode){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	789b      	ldrb	r3, [r3, #2]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d052      	beq.n	80004c8 <GPIO_u8PinInit+0x2c4>
					if (INPUT != PinConfig->Mode)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	789b      	ldrb	r3, [r3, #2]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d033      	beq.n	8000492 <GPIO_u8PinInit+0x28e>
					{
						/* Configure Output Type (Push-Pull or Open-Drain) */
						GPIOB->OTYPER &= ~(1 << PinConfig->Pin);
 800042a:	4b4a      	ldr	r3, [pc, #296]	@ (8000554 <GPIO_u8PinInit+0x350>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7852      	ldrb	r2, [r2, #1]
 8000432:	4611      	mov	r1, r2
 8000434:	2201      	movs	r2, #1
 8000436:	408a      	lsls	r2, r1
 8000438:	43d2      	mvns	r2, r2
 800043a:	4611      	mov	r1, r2
 800043c:	4a45      	ldr	r2, [pc, #276]	@ (8000554 <GPIO_u8PinInit+0x350>)
 800043e:	400b      	ands	r3, r1
 8000440:	6053      	str	r3, [r2, #4]
						GPIOB->OTYPER |= (PinConfig->OutputType << PinConfig->Pin);
 8000442:	4b44      	ldr	r3, [pc, #272]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7852      	ldrb	r2, [r2, #1]
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a3f      	ldr	r2, [pc, #252]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6053      	str	r3, [r2, #4]
						/* Configure Output Speed (Low, Medium, High, or Very High)*/
						GPIOB->OSPEEDR &= ~(0x3 << (PinConfig->Pin * 2));
 800045c:	4b3d      	ldr	r3, [pc, #244]	@ (8000554 <GPIO_u8PinInit+0x350>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7852      	ldrb	r2, [r2, #1]
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	43d2      	mvns	r2, r2
 800046e:	4611      	mov	r1, r2
 8000470:	4a38      	ldr	r2, [pc, #224]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000472:	400b      	ands	r3, r1
 8000474:	6093      	str	r3, [r2, #8]
						GPIOB->OSPEEDR |= (PinConfig->Speed << (PinConfig->Pin * 2));
 8000476:	4b37      	ldr	r3, [pc, #220]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7952      	ldrb	r2, [r2, #5]
 800047e:	4611      	mov	r1, r2
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	7852      	ldrb	r2, [r2, #1]
 8000484:	0052      	lsls	r2, r2, #1
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a31      	ldr	r2, [pc, #196]	@ (8000554 <GPIO_u8PinInit+0x350>)
 800048e:	430b      	orrs	r3, r1
 8000490:	6093      	str	r3, [r2, #8]
					}
					/* Configure Pull-up/Pull-down (None, Pull-up, or Pull-down)*/
					GPIOB->PUPDR &= ~(0x3 << (PinConfig->Pin * 2));
 8000492:	4b30      	ldr	r3, [pc, #192]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7852      	ldrb	r2, [r2, #1]
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	2103      	movs	r1, #3
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	43d2      	mvns	r2, r2
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80004a8:	400b      	ands	r3, r1
 80004aa:	60d3      	str	r3, [r2, #12]
					GPIOB->PUPDR |= (PinConfig->PullType << (PinConfig->Pin * 2));
 80004ac:	4b29      	ldr	r3, [pc, #164]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	78d2      	ldrb	r2, [r2, #3]
 80004b4:	4611      	mov	r1, r2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7852      	ldrb	r2, [r2, #1]
 80004ba:	0052      	lsls	r2, r2, #1
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a24      	ldr	r2, [pc, #144]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	60d3      	str	r3, [r2, #12]
				}
	            /* If Alternate Function is needed, configure it*/
	            if (PinConfig->Mode == ALTERNATE_FUNCTION) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	f040 8281 	bne.w	80009d4 <GPIO_u8PinInit+0x7d0>
	                /* Alternate function register (AFR) is split into two registers
	                 * (AFRL and AFRH) for pins 0-7 and 8-15*/
	                if (PinConfig->Pin < 8) {
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	785b      	ldrb	r3, [r3, #1]
 80004d6:	2b07      	cmp	r3, #7
 80004d8:	d81b      	bhi.n	8000512 <GPIO_u8PinInit+0x30e>
	                    GPIOB->AFR[0] &= ~(0xF << (PinConfig->Pin * 4));
 80004da:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7852      	ldrb	r2, [r2, #1]
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	210f      	movs	r1, #15
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a19      	ldr	r2, [pc, #100]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80004f0:	400b      	ands	r3, r1
 80004f2:	6213      	str	r3, [r2, #32]
	                    GPIOB->AFR[0] |= (PinConfig->AltFunc << (PinConfig->Pin * 4));
 80004f4:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <GPIO_u8PinInit+0x350>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7992      	ldrb	r2, [r2, #6]
 80004fc:	4611      	mov	r1, r2
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7852      	ldrb	r2, [r2, #1]
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <GPIO_u8PinInit+0x350>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6213      	str	r3, [r2, #32]
	                } else {
	                    GPIOB->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
	                    GPIOB->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
	                }
	            }
				break;
 8000510:	e260      	b.n	80009d4 <GPIO_u8PinInit+0x7d0>
	                    GPIOB->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	7852      	ldrb	r2, [r2, #1]
 800051a:	3a08      	subs	r2, #8
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	210f      	movs	r1, #15
 8000520:	fa01 f202 	lsl.w	r2, r1, r2
 8000524:	43d2      	mvns	r2, r2
 8000526:	4611      	mov	r1, r2
 8000528:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <GPIO_u8PinInit+0x350>)
 800052a:	400b      	ands	r3, r1
 800052c:	6253      	str	r3, [r2, #36]	@ 0x24
	                    GPIOB->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7992      	ldrb	r2, [r2, #6]
 8000536:	4611      	mov	r1, r2
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7852      	ldrb	r2, [r2, #1]
 800053c:	3a08      	subs	r2, #8
 800053e:	0092      	lsls	r2, r2, #2
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a03      	ldr	r2, [pc, #12]	@ (8000554 <GPIO_u8PinInit+0x350>)
 8000548:	430b      	orrs	r3, r1
 800054a:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 800054c:	e242      	b.n	80009d4 <GPIO_u8PinInit+0x7d0>
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40020400 	.word	0x40020400

			case PORTC:
				GPIOC_PCLK_EN();
 8000558:	4b5d      	ldr	r3, [pc, #372]	@ (80006d0 <GPIO_u8PinInit+0x4cc>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055c:	4a5c      	ldr	r2, [pc, #368]	@ (80006d0 <GPIO_u8PinInit+0x4cc>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6313      	str	r3, [r2, #48]	@ 0x30
				/*Clear the two bits in the MODER register then Set the new mode to the correct pin position*/
				GPIOC->MODER &= ~(0x3 << (PinConfig->Pin * 2));
 8000564:	4b5b      	ldr	r3, [pc, #364]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7852      	ldrb	r2, [r2, #1]
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	2103      	movs	r1, #3
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	43d2      	mvns	r2, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a56      	ldr	r2, [pc, #344]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 800057a:	400b      	ands	r3, r1
 800057c:	6013      	str	r3, [r2, #0]
				GPIOC->MODER |= ( PinConfig->Mode << (PinConfig->Pin * 2 ));
 800057e:	4b55      	ldr	r3, [pc, #340]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7892      	ldrb	r2, [r2, #2]
 8000586:	4611      	mov	r1, r2
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	7852      	ldrb	r2, [r2, #1]
 800058c:	0052      	lsls	r2, r2, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a4f      	ldr	r2, [pc, #316]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]
				if(ANALOG != PinConfig->Mode){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d052      	beq.n	8000648 <GPIO_u8PinInit+0x444>
					if (INPUT != PinConfig->Mode)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	789b      	ldrb	r3, [r3, #2]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d033      	beq.n	8000612 <GPIO_u8PinInit+0x40e>
					{
						/* Configure Output Type (Push-Pull or Open-Drain) */
						GPIOC->OTYPER &= ~(1 << PinConfig->Pin);
 80005aa:	4b4a      	ldr	r3, [pc, #296]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7852      	ldrb	r2, [r2, #1]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	43d2      	mvns	r2, r2
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a45      	ldr	r2, [pc, #276]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80005be:	400b      	ands	r3, r1
 80005c0:	6053      	str	r3, [r2, #4]
						GPIOC->OTYPER |= (PinConfig->OutputType << PinConfig->Pin);
 80005c2:	4b44      	ldr	r3, [pc, #272]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7852      	ldrb	r2, [r2, #1]
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a3f      	ldr	r2, [pc, #252]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	6053      	str	r3, [r2, #4]
						/* Configure Output Speed (Low, Medium, High, or Very High)*/
						GPIOC->OSPEEDR &= ~(0x3 << (PinConfig->Pin * 2));
 80005dc:	4b3d      	ldr	r3, [pc, #244]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7852      	ldrb	r2, [r2, #1]
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	2103      	movs	r1, #3
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a38      	ldr	r2, [pc, #224]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80005f2:	400b      	ands	r3, r1
 80005f4:	6093      	str	r3, [r2, #8]
						GPIOC->OSPEEDR |= (PinConfig->Speed << (PinConfig->Pin * 2));
 80005f6:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7952      	ldrb	r2, [r2, #5]
 80005fe:	4611      	mov	r1, r2
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7852      	ldrb	r2, [r2, #1]
 8000604:	0052      	lsls	r2, r2, #1
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	4611      	mov	r1, r2
 800060c:	4a31      	ldr	r2, [pc, #196]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 800060e:	430b      	orrs	r3, r1
 8000610:	6093      	str	r3, [r2, #8]
					}
					/* Configure Pull-up/Pull-down (None, Pull-up, or Pull-down)*/
					GPIOC->PUPDR &= ~(0x3 << (PinConfig->Pin * 2));
 8000612:	4b30      	ldr	r3, [pc, #192]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7852      	ldrb	r2, [r2, #1]
 800061a:	0052      	lsls	r2, r2, #1
 800061c:	2103      	movs	r1, #3
 800061e:	fa01 f202 	lsl.w	r2, r1, r2
 8000622:	43d2      	mvns	r2, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a2b      	ldr	r2, [pc, #172]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000628:	400b      	ands	r3, r1
 800062a:	60d3      	str	r3, [r2, #12]
					GPIOC->PUPDR |= (PinConfig->PullType << (PinConfig->Pin * 2));
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	78d2      	ldrb	r2, [r2, #3]
 8000634:	4611      	mov	r1, r2
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	7852      	ldrb	r2, [r2, #1]
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	fa01 f202 	lsl.w	r2, r1, r2
 8000640:	4611      	mov	r1, r2
 8000642:	4a24      	ldr	r2, [pc, #144]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000644:	430b      	orrs	r3, r1
 8000646:	60d3      	str	r3, [r2, #12]
				}
	            /* If Alternate Function is needed, configure it*/
	            if (PinConfig->Mode == ALTERNATE_FUNCTION) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	789b      	ldrb	r3, [r3, #2]
 800064c:	2b02      	cmp	r3, #2
 800064e:	f040 81c3 	bne.w	80009d8 <GPIO_u8PinInit+0x7d4>
	                /* Alternate function register (AFR) is split into two registers
	                 * (AFRL and AFRH) for pins 0-7 and 8-15*/
	                if (PinConfig->Pin < 8) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	2b07      	cmp	r3, #7
 8000658:	d81b      	bhi.n	8000692 <GPIO_u8PinInit+0x48e>
	                    GPIOC->AFR[0] &= ~(0xF << (PinConfig->Pin * 4));
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 800065c:	6a1b      	ldr	r3, [r3, #32]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	7852      	ldrb	r2, [r2, #1]
 8000662:	0092      	lsls	r2, r2, #2
 8000664:	210f      	movs	r1, #15
 8000666:	fa01 f202 	lsl.w	r2, r1, r2
 800066a:	43d2      	mvns	r2, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000670:	400b      	ands	r3, r1
 8000672:	6213      	str	r3, [r2, #32]
	                    GPIOC->AFR[0] |= (PinConfig->AltFunc << (PinConfig->Pin * 4));
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000676:	6a1b      	ldr	r3, [r3, #32]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7992      	ldrb	r2, [r2, #6]
 800067c:	4611      	mov	r1, r2
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	7852      	ldrb	r2, [r2, #1]
 8000682:	0092      	lsls	r2, r2, #2
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6213      	str	r3, [r2, #32]
	                } else {
	                    GPIOC->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
	                    GPIOC->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
	                }
	            }
				break;
 8000690:	e1a2      	b.n	80009d8 <GPIO_u8PinInit+0x7d4>
	                    GPIOC->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	7852      	ldrb	r2, [r2, #1]
 800069a:	3a08      	subs	r2, #8
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	210f      	movs	r1, #15
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	43d2      	mvns	r2, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80006aa:	400b      	ands	r3, r1
 80006ac:	6253      	str	r3, [r2, #36]	@ 0x24
	                    GPIOC->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	7992      	ldrb	r2, [r2, #6]
 80006b6:	4611      	mov	r1, r2
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7852      	ldrb	r2, [r2, #1]
 80006bc:	3a08      	subs	r2, #8
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	4611      	mov	r1, r2
 80006c6:	4a03      	ldr	r2, [pc, #12]	@ (80006d4 <GPIO_u8PinInit+0x4d0>)
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 80006cc:	e184      	b.n	80009d8 <GPIO_u8PinInit+0x7d4>
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020800 	.word	0x40020800

			case PORTD:
				GPIOD_PCLK_EN();
 80006d8:	4b5d      	ldr	r3, [pc, #372]	@ (8000850 <GPIO_u8PinInit+0x64c>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006dc:	4a5c      	ldr	r2, [pc, #368]	@ (8000850 <GPIO_u8PinInit+0x64c>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6313      	str	r3, [r2, #48]	@ 0x30
				/*Clear the two bits in the MODER register then Set the new mode to the correct pin position*/
				GPIOD->MODER &= ~(0x3 << (PinConfig->Pin * 2));
 80006e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7852      	ldrb	r2, [r2, #1]
 80006ec:	0052      	lsls	r2, r2, #1
 80006ee:	2103      	movs	r1, #3
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a56      	ldr	r2, [pc, #344]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80006fa:	400b      	ands	r3, r1
 80006fc:	6013      	str	r3, [r2, #0]
				GPIOD->MODER |= ( PinConfig->Mode << (PinConfig->Pin * 2 ));
 80006fe:	4b55      	ldr	r3, [pc, #340]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7892      	ldrb	r2, [r2, #2]
 8000706:	4611      	mov	r1, r2
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	7852      	ldrb	r2, [r2, #1]
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	fa01 f202 	lsl.w	r2, r1, r2
 8000712:	4611      	mov	r1, r2
 8000714:	4a4f      	ldr	r2, [pc, #316]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000716:	430b      	orrs	r3, r1
 8000718:	6013      	str	r3, [r2, #0]
				if(ANALOG != PinConfig->Mode){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d052      	beq.n	80007c8 <GPIO_u8PinInit+0x5c4>
					if (INPUT != PinConfig->Mode)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d033      	beq.n	8000792 <GPIO_u8PinInit+0x58e>
					{
						/* Configure Output Type (Push-Pull or Open-Drain) */
						GPIOD->OTYPER &= ~(1 << PinConfig->Pin);
 800072a:	4b4a      	ldr	r3, [pc, #296]	@ (8000854 <GPIO_u8PinInit+0x650>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	7852      	ldrb	r2, [r2, #1]
 8000732:	4611      	mov	r1, r2
 8000734:	2201      	movs	r2, #1
 8000736:	408a      	lsls	r2, r1
 8000738:	43d2      	mvns	r2, r2
 800073a:	4611      	mov	r1, r2
 800073c:	4a45      	ldr	r2, [pc, #276]	@ (8000854 <GPIO_u8PinInit+0x650>)
 800073e:	400b      	ands	r3, r1
 8000740:	6053      	str	r3, [r2, #4]
						GPIOD->OTYPER |= (PinConfig->OutputType << PinConfig->Pin);
 8000742:	4b44      	ldr	r3, [pc, #272]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	7912      	ldrb	r2, [r2, #4]
 800074a:	4611      	mov	r1, r2
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7852      	ldrb	r2, [r2, #1]
 8000750:	fa01 f202 	lsl.w	r2, r1, r2
 8000754:	4611      	mov	r1, r2
 8000756:	4a3f      	ldr	r2, [pc, #252]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000758:	430b      	orrs	r3, r1
 800075a:	6053      	str	r3, [r2, #4]
						/* Configure Output Speed (Low, Medium, High, or Very High)*/
						GPIOD->OSPEEDR &= ~(0x3 << (PinConfig->Pin * 2));
 800075c:	4b3d      	ldr	r3, [pc, #244]	@ (8000854 <GPIO_u8PinInit+0x650>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7852      	ldrb	r2, [r2, #1]
 8000764:	0052      	lsls	r2, r2, #1
 8000766:	2103      	movs	r1, #3
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	43d2      	mvns	r2, r2
 800076e:	4611      	mov	r1, r2
 8000770:	4a38      	ldr	r2, [pc, #224]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000772:	400b      	ands	r3, r1
 8000774:	6093      	str	r3, [r2, #8]
						GPIOD->OSPEEDR |= (PinConfig->Speed << (PinConfig->Pin * 2));
 8000776:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7952      	ldrb	r2, [r2, #5]
 800077e:	4611      	mov	r1, r2
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	7852      	ldrb	r2, [r2, #1]
 8000784:	0052      	lsls	r2, r2, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a31      	ldr	r2, [pc, #196]	@ (8000854 <GPIO_u8PinInit+0x650>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6093      	str	r3, [r2, #8]
					}
					/* Configure Pull-up/Pull-down (None, Pull-up, or Pull-down)*/
					GPIOD->PUPDR &= ~(0x3 << (PinConfig->Pin * 2));
 8000792:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	7852      	ldrb	r2, [r2, #1]
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	2103      	movs	r1, #3
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80007a8:	400b      	ands	r3, r1
 80007aa:	60d3      	str	r3, [r2, #12]
					GPIOD->PUPDR |= (PinConfig->PullType << (PinConfig->Pin * 2));
 80007ac:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	78d2      	ldrb	r2, [r2, #3]
 80007b4:	4611      	mov	r1, r2
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	7852      	ldrb	r2, [r2, #1]
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a24      	ldr	r2, [pc, #144]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80007c4:	430b      	orrs	r3, r1
 80007c6:	60d3      	str	r3, [r2, #12]
				}
	            /* If Alternate Function is needed, configure it*/
	            if (PinConfig->Mode == ALTERNATE_FUNCTION) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	789b      	ldrb	r3, [r3, #2]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	f040 8105 	bne.w	80009dc <GPIO_u8PinInit+0x7d8>
	                /* Alternate function register (AFR) is split into two registers
	                 * (AFRL and AFRH) for pins 0-7 and 8-15*/
	                if (PinConfig->Pin < 8) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	785b      	ldrb	r3, [r3, #1]
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	d81b      	bhi.n	8000812 <GPIO_u8PinInit+0x60e>
	                    GPIOD->AFR[0] &= ~(0xF << (PinConfig->Pin * 4));
 80007da:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	7852      	ldrb	r2, [r2, #1]
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	210f      	movs	r1, #15
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	43d2      	mvns	r2, r2
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a19      	ldr	r2, [pc, #100]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80007f0:	400b      	ands	r3, r1
 80007f2:	6213      	str	r3, [r2, #32]
	                    GPIOD->AFR[0] |= (PinConfig->AltFunc << (PinConfig->Pin * 4));
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <GPIO_u8PinInit+0x650>)
 80007f6:	6a1b      	ldr	r3, [r3, #32]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	7992      	ldrb	r2, [r2, #6]
 80007fc:	4611      	mov	r1, r2
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	7852      	ldrb	r2, [r2, #1]
 8000802:	0092      	lsls	r2, r2, #2
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <GPIO_u8PinInit+0x650>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6213      	str	r3, [r2, #32]
	                } else {
	                    GPIOD->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
	                    GPIOD->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
	                }
	            }
				break;
 8000810:	e0e4      	b.n	80009dc <GPIO_u8PinInit+0x7d8>
	                    GPIOD->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	7852      	ldrb	r2, [r2, #1]
 800081a:	3a08      	subs	r2, #8
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	210f      	movs	r1, #15
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	43d2      	mvns	r2, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <GPIO_u8PinInit+0x650>)
 800082a:	400b      	ands	r3, r1
 800082c:	6253      	str	r3, [r2, #36]	@ 0x24
	                    GPIOD->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7992      	ldrb	r2, [r2, #6]
 8000836:	4611      	mov	r1, r2
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7852      	ldrb	r2, [r2, #1]
 800083c:	3a08      	subs	r2, #8
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a03      	ldr	r2, [pc, #12]	@ (8000854 <GPIO_u8PinInit+0x650>)
 8000848:	430b      	orrs	r3, r1
 800084a:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 800084c:	e0c6      	b.n	80009dc <GPIO_u8PinInit+0x7d8>
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40020c00 	.word	0x40020c00

			case PORTE:
				GPIOE_PCLK_EN();
 8000858:	4b66      	ldr	r3, [pc, #408]	@ (80009f4 <GPIO_u8PinInit+0x7f0>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	4a65      	ldr	r2, [pc, #404]	@ (80009f4 <GPIO_u8PinInit+0x7f0>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6313      	str	r3, [r2, #48]	@ 0x30
				/*Clear the two bits in the MODER register then Set the new mode to the correct pin position*/
				GPIOE->MODER &= ~(0x3 << (PinConfig->Pin * 2));
 8000864:	4b64      	ldr	r3, [pc, #400]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7852      	ldrb	r2, [r2, #1]
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	2103      	movs	r1, #3
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	43d2      	mvns	r2, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a5f      	ldr	r2, [pc, #380]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 800087a:	400b      	ands	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
				GPIOE->MODER |= ( PinConfig->Mode << (PinConfig->Pin * 2 ));
 800087e:	4b5e      	ldr	r3, [pc, #376]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	7892      	ldrb	r2, [r2, #2]
 8000886:	4611      	mov	r1, r2
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7852      	ldrb	r2, [r2, #1]
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	fa01 f202 	lsl.w	r2, r1, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4a58      	ldr	r2, [pc, #352]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000896:	430b      	orrs	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
				if(ANALOG != PinConfig->Mode){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	789b      	ldrb	r3, [r3, #2]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d052      	beq.n	8000948 <GPIO_u8PinInit+0x744>
					if (INPUT != PinConfig->Mode)/* Output or Alternate */
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	789b      	ldrb	r3, [r3, #2]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d033      	beq.n	8000912 <GPIO_u8PinInit+0x70e>
					{
						/* Configure Output Type (Push-Pull or Open-Drain) */
						GPIOE->OTYPER &= ~(1 << PinConfig->Pin);
 80008aa:	4b53      	ldr	r3, [pc, #332]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	7852      	ldrb	r2, [r2, #1]
 80008b2:	4611      	mov	r1, r2
 80008b4:	2201      	movs	r2, #1
 80008b6:	408a      	lsls	r2, r1
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	4611      	mov	r1, r2
 80008bc:	4a4e      	ldr	r2, [pc, #312]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80008be:	400b      	ands	r3, r1
 80008c0:	6053      	str	r3, [r2, #4]
						GPIOE->OTYPER |= (PinConfig->OutputType << PinConfig->Pin);
 80008c2:	4b4d      	ldr	r3, [pc, #308]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	7912      	ldrb	r2, [r2, #4]
 80008ca:	4611      	mov	r1, r2
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	7852      	ldrb	r2, [r2, #1]
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a48      	ldr	r2, [pc, #288]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6053      	str	r3, [r2, #4]
						/* Configure Output Speed (Low, Medium, High, or Very High)*/
						GPIOE->OSPEEDR &= ~(0x3 << (PinConfig->Pin * 2));
 80008dc:	4b46      	ldr	r3, [pc, #280]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	7852      	ldrb	r2, [r2, #1]
 80008e4:	0052      	lsls	r2, r2, #1
 80008e6:	2103      	movs	r1, #3
 80008e8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a41      	ldr	r2, [pc, #260]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80008f2:	400b      	ands	r3, r1
 80008f4:	6093      	str	r3, [r2, #8]
						GPIOE->OSPEEDR |= (PinConfig->Speed << (PinConfig->Pin * 2));
 80008f6:	4b40      	ldr	r3, [pc, #256]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	7952      	ldrb	r2, [r2, #5]
 80008fe:	4611      	mov	r1, r2
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	7852      	ldrb	r2, [r2, #1]
 8000904:	0052      	lsls	r2, r2, #1
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	4611      	mov	r1, r2
 800090c:	4a3a      	ldr	r2, [pc, #232]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 800090e:	430b      	orrs	r3, r1
 8000910:	6093      	str	r3, [r2, #8]
					}
					/* Configure Pull-up/Pull-down (None, Pull-up, or Pull-down)*/
					GPIOE->PUPDR &= ~(0x3 << (PinConfig->Pin * 2));
 8000912:	4b39      	ldr	r3, [pc, #228]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	7852      	ldrb	r2, [r2, #1]
 800091a:	0052      	lsls	r2, r2, #1
 800091c:	2103      	movs	r1, #3
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	43d2      	mvns	r2, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a34      	ldr	r2, [pc, #208]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000928:	400b      	ands	r3, r1
 800092a:	60d3      	str	r3, [r2, #12]
					GPIOE->PUPDR |= (PinConfig->PullType << (PinConfig->Pin * 2));
 800092c:	4b32      	ldr	r3, [pc, #200]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	78d2      	ldrb	r2, [r2, #3]
 8000934:	4611      	mov	r1, r2
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	7852      	ldrb	r2, [r2, #1]
 800093a:	0052      	lsls	r2, r2, #1
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a2d      	ldr	r2, [pc, #180]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000944:	430b      	orrs	r3, r1
 8000946:	60d3      	str	r3, [r2, #12]
				}
	            /* If Alternate Function is needed, configure it*/
	            if (PinConfig->Mode == ALTERNATE_FUNCTION) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d147      	bne.n	80009e0 <GPIO_u8PinInit+0x7dc>
	                /* Alternate function register (AFR) is split into two registers
	                 * (AFRL and AFRH) for pins 0-7 and 8-15*/
	                if (PinConfig->Pin < 8) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	2b07      	cmp	r3, #7
 8000956:	d81b      	bhi.n	8000990 <GPIO_u8PinInit+0x78c>
	                    GPIOE->AFR[0] &= ~(0xF << (PinConfig->Pin * 4));
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	7852      	ldrb	r2, [r2, #1]
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	210f      	movs	r1, #15
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	43d2      	mvns	r2, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a22      	ldr	r2, [pc, #136]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 800096e:	400b      	ands	r3, r1
 8000970:	6213      	str	r3, [r2, #32]
	                    GPIOE->AFR[0] |= (PinConfig->AltFunc << (PinConfig->Pin * 4));
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	7992      	ldrb	r2, [r2, #6]
 800097a:	4611      	mov	r1, r2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	7852      	ldrb	r2, [r2, #1]
 8000980:	0092      	lsls	r2, r2, #2
 8000982:	fa01 f202 	lsl.w	r2, r1, r2
 8000986:	4611      	mov	r1, r2
 8000988:	4a1b      	ldr	r2, [pc, #108]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 800098a:	430b      	orrs	r3, r1
 800098c:	6213      	str	r3, [r2, #32]
	                } else {
	                    GPIOE->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
	                    GPIOE->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
	                }
	            }
				break;
 800098e:	e027      	b.n	80009e0 <GPIO_u8PinInit+0x7dc>
	                    GPIOE->AFR[1] &= ~(0xF << ((PinConfig->Pin - 8) * 4));
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 8000992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	7852      	ldrb	r2, [r2, #1]
 8000998:	3a08      	subs	r2, #8
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	210f      	movs	r1, #15
 800099e:	fa01 f202 	lsl.w	r2, r1, r2
 80009a2:	43d2      	mvns	r2, r2
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a14      	ldr	r2, [pc, #80]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80009a8:	400b      	ands	r3, r1
 80009aa:	6253      	str	r3, [r2, #36]	@ 0x24
	                    GPIOE->AFR[1] |= (PinConfig->AltFunc << ((PinConfig->Pin - 8) * 4));
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80009ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	7992      	ldrb	r2, [r2, #6]
 80009b4:	4611      	mov	r1, r2
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	7852      	ldrb	r2, [r2, #1]
 80009ba:	3a08      	subs	r2, #8
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	4611      	mov	r1, r2
 80009c4:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <GPIO_u8PinInit+0x7f4>)
 80009c6:	430b      	orrs	r3, r1
 80009c8:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 80009ca:	e009      	b.n	80009e0 <GPIO_u8PinInit+0x7dc>
			default:
				break;
 80009cc:	bf00      	nop
 80009ce:	e008      	b.n	80009e2 <GPIO_u8PinInit+0x7de>
				break;
 80009d0:	bf00      	nop
 80009d2:	e006      	b.n	80009e2 <GPIO_u8PinInit+0x7de>
				break;
 80009d4:	bf00      	nop
 80009d6:	e004      	b.n	80009e2 <GPIO_u8PinInit+0x7de>
				break;
 80009d8:	bf00      	nop
 80009da:	e002      	b.n	80009e2 <GPIO_u8PinInit+0x7de>
				break;
 80009dc:	bf00      	nop
 80009de:	e000      	b.n	80009e2 <GPIO_u8PinInit+0x7de>
				break;
 80009e0:	bf00      	nop
		}

		retVar = E_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]
	}
	return retVar;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000

080009fc <GPIO_u8SetPinValue>:

Std_ReturnType GPIO_u8SetPinValue(const GPIO_Port_t Port, GPIO_Pin_t PinNumber, GPIO_PinVal_t PinVal){
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	460b      	mov	r3, r1
 8000a08:	71bb      	strb	r3, [r7, #6]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	717b      	strb	r3, [r7, #5]
    Std_ReturnType retVar = E_NOT_OK;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
    GPIO_Registers_t *GPIOx;  /* Pointer to GPIO port structure*/

    if ((Port > PORTH) || (PinNumber > PIN15)) {
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d802      	bhi.n	8000a1e <GPIO_u8SetPinValue+0x22>
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d902      	bls.n	8000a24 <GPIO_u8SetPinValue+0x28>
        retVar = E_NOT_OK;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
 8000a22:	e051      	b.n	8000ac8 <GPIO_u8SetPinValue+0xcc>
    } else {
        switch (Port) {
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b07      	cmp	r3, #7
 8000a28:	d82a      	bhi.n	8000a80 <GPIO_u8SetPinValue+0x84>
 8000a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <GPIO_u8SetPinValue+0x34>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a51 	.word	0x08000a51
 8000a34:	08000a57 	.word	0x08000a57
 8000a38:	08000a5d 	.word	0x08000a5d
 8000a3c:	08000a63 	.word	0x08000a63
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	08000a6f 	.word	0x08000a6f
 8000a48:	08000a75 	.word	0x08000a75
 8000a4c:	08000a7b 	.word	0x08000a7b
            case PORTA: GPIOx = GPIOA; break;
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <GPIO_u8SetPinValue+0xd8>)
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	e017      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>
            case PORTB: GPIOx = GPIOB; break;
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <GPIO_u8SetPinValue+0xdc>)
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	e014      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>
            case PORTC: GPIOx = GPIOC; break;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <GPIO_u8SetPinValue+0xe0>)
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	e011      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>
            case PORTD: GPIOx = GPIOD; break;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <GPIO_u8SetPinValue+0xe4>)
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	e00e      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>
            case PORTE: GPIOx = GPIOE; break;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <GPIO_u8SetPinValue+0xe8>)
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	e00b      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>
            case PORTF: GPIOx = GPIOF; break;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <GPIO_u8SetPinValue+0xec>)
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	e008      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>
            case PORTG: GPIOx = GPIOG; break;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <GPIO_u8SetPinValue+0xf0>)
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	e005      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>
            case PORTH: GPIOx = GPIOH; break;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <GPIO_u8SetPinValue+0xf4>)
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	e002      	b.n	8000a86 <GPIO_u8SetPinValue+0x8a>

            default: GPIOx = NULL_PTR; break;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	bf00      	nop
        }
        if (GPIOx != NULL_PTR) {
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d01b      	beq.n	8000ac4 <GPIO_u8SetPinValue+0xc8>
            if (PinVal == PIN_HIGH) {
 8000a8c:	797b      	ldrb	r3, [r7, #5]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d107      	bne.n	8000aa2 <GPIO_u8SetPinValue+0xa6>
                GPIOx->BSRR = (1 << PinNumber);
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2201      	movs	r2, #1
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	619a      	str	r2, [r3, #24]
 8000aa0:	e00d      	b.n	8000abe <GPIO_u8SetPinValue+0xc2>
            } else if (PinVal == PIN_LOW) {
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d108      	bne.n	8000aba <GPIO_u8SetPinValue+0xbe>
                GPIOx->BSRR = (1 << (PinNumber + 16));
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	3310      	adds	r3, #16
 8000aac:	2201      	movs	r2, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	619a      	str	r2, [r3, #24]
 8000ab8:	e001      	b.n	8000abe <GPIO_u8SetPinValue+0xc2>
            } else {
                retVar = E_NOT_OK;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
            }
            retVar = E_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e001      	b.n	8000ac8 <GPIO_u8SetPinValue+0xcc>
        }else{
			retVar = E_NOT_OK;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
		}
    }
    return retVar;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40021400 	.word	0x40021400
 8000aec:	40021800 	.word	0x40021800
 8000af0:	40021c00 	.word	0x40021c00

08000af4 <SYSTICK_Init>:

static volatile uint32 uwTick = 0;
extern uint8 Os_Tick;
/*************************************** Section : Functions Definitions ***************************************/

Std_ReturnType SYSTICK_Init(void){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
	Std_ReturnType retVar = E_NOT_OK;
 8000afa:	2301      	movs	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]

#if SYSTICK_CLK_SOURCE == SYSTICK_AHB_DIV_1
	CLR_BIT(Systick->CSR, SYSTICK_CSR_CLKSOURCE);
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b04:	f023 0304 	bic.w	r3, r3, #4
 8000b08:	6013      	str	r3, [r2, #0]
	retVar = E_NOT_OK;
#endif


    /* Set the SysTick Reload Value for 1 ms intervals*/
    Systick->RVR = (SYSTEM_CLK / (SYSTICK_AHB_DIV_8 * 1000)) - 1;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b0c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000b10:	605a      	str	r2, [r3, #4]


    /* Reset the Current Value Register*/
    Systick->CVR = 0;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]

    __asm volatile ("cpsie i");
 8000b18:	b662      	cpsie	i
    /* Enable SysTick and its interrupt*/
    SET_BIT(Systick->CSR, SYSTICK_CSR_ENABLE);
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6013      	str	r3, [r2, #0]
    SET_BIT(Systick->CSR, SYSTICK_CSR_TICKINT);
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SYSTICK_Init+0x4c>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6013      	str	r3, [r2, #0]

	return retVar;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <SysTick_Handler>:
 * |  R10  | |*****************************|
 * |  R11  | |*****************************|
 * |-------| |-----------------------------|
 */
__attribute__ ((naked))void SysTick_Handler(void) {
    uwTick++;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <SysTick_Handler+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <SysTick_Handler+0x40>)
 8000b4c:	6013      	str	r3, [r2, #0]
    TOG_BIT(Os_Tick, 1); //TOG_BIT((GPIOA->ODR), 5);
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <SysTick_Handler+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f083 0302 	eor.w	r3, r3, #2
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <SysTick_Handler+0x44>)
 8000b5a:	701a      	strb	r2, [r3, #0]

    /* --- Save the context of the current task --- */
	__asm volatile("MRS R0, PSP");
 8000b5c:	f3ef 8009 	mrs	r0, PSP

	 __asm volatile("STMDB R0!,{R4-R11}");
 8000b60:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*pushing LR Value to call another function*/
	__asm volatile("PUSH {LR}");
 8000b64:	b500      	push	{lr}

	 __asm volatile("BL SavePSP_Value");
 8000b66:	f000 f8b7 	bl	8000cd8 <SavePSP_Value>

    /* --- Retrieve the context of the next task --- */

	 /*Decide next task to run*/
	 __asm volatile("BL UpdateNextTask");
 8000b6a:	f000 f80f 	bl	8000b8c <UpdateNextTask>

	 /*Get its PSP Value*/
	 __asm volatile("BL GetCurrent_PSP_value"); /*Return Value Of the Function is Returned To R0*/
 8000b6e:	f000 f827 	bl	8000bc0 <GetCurrent_PSP_value>

	 /*Popping the LR Register Value to return safely to the caller*/
	 __asm volatile("POP {LR}");
 8000b72:	f85d eb04 	ldr.w	lr, [sp], #4

	 /*Using that psp value, retrieve remaining stack data (R4->R11)*/
	 __asm volatile("LDM R0!,{R4-R11}");
 8000b76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

     /*so we should update the PSP Value */
	 __asm volatile("MSR PSP, R0");
 8000b7a:	f380 8809 	msr	PSP, r0

	/*
	 * 4. Branch to LR to return from Interrupt handler
	 * LR --> contain EXC_RETURN Code
	 */
	__asm("BX LR");
 8000b7e:	4770      	bx	lr

}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	20000034 	.word	0x20000034
 8000b88:	20000039 	.word	0x20000039

08000b8c <UpdateNextTask>:

/*************************************** Section : Functions Definitions ***************************************/


/**/
void UpdateNextTask(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	Global_Current_Task++;
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <UpdateNextTask+0x28>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <UpdateNextTask+0x28>)
 8000b9a:	701a      	strb	r2, [r3, #0]
	Global_Current_Task = Global_Current_Task % Max_Tasks_Number;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <UpdateNextTask+0x28>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <UpdateNextTask+0x28>)
 8000ba8:	701a      	strb	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000038 	.word	0x20000038

08000bb8 <Stack_InitScheduler_Stack>:


__attribute__ ((naked)) void Stack_InitScheduler_Stack(uint32 Copy_u32SchedTOS){
	/* Arguments of function stored in the first 4 GPRs
	 * We use Main Stack Pointer to Organize stack of the scheduler */
	__asm volatile("MSR MSP, R0");
 8000bb8:	f380 8808 	msr	MSP, r0

	/* Branching indirect */
	__asm volatile("BX LR");
 8000bbc:	4770      	bx	lr

}
 8000bbe:	bf00      	nop

08000bc0 <GetCurrent_PSP_value>:

uint32 GetCurrent_PSP_value(){
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	return Task_PSP[Global_Current_Task];
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <GetCurrent_PSP_value+0x18>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <GetCurrent_PSP_value+0x1c>)
 8000bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000038 	.word	0x20000038
 8000bdc:	20000008 	.word	0x20000008

08000be0 <ChangeToPSP>:
 * @note The function is marked as "naked" to ensure no prologue or epilogue is added by the compiler.
 */
__attribute__ ((naked)) void ChangeToPSP(){

	/*pushing LR Value to call another function*/
	__asm volatile("PUSH {LR}");
 8000be0:	b500      	push	{lr}

	/* Initialize PSP with task1 stack address*/
	__asm volatile("BL GetCurrent_PSP_value"); /*Return Value Of the Function is Returned To R0*/
 8000be2:	f7ff ffed 	bl	8000bc0 <GetCurrent_PSP_value>

	__asm volatile("MSR PSP, R0");
 8000be6:	f380 8809 	msr	PSP, r0

	/*Popping the LR Register Value to return safely to the caller*/
	__asm volatile("POP {LR}");
 8000bea:	f85d eb04 	ldr.w	lr, [sp], #4

	 /*Defines the currently active stack pointer to PSP using CONTROL Register
	 1 = PSP is the current stack pointer.*/
	__asm volatile("MOV R0, #0x02");
 8000bee:	f04f 0002 	mov.w	r0, #2
    /* Set CONTROL register to switch to PSP (bit 1 = 1) */
	__asm volatile("MSR CONTROL, R0");
 8000bf2:	f380 8814 	msr	CONTROL, r0
    /* Return to caller */
	__asm volatile("BX LR");
 8000bf6:	4770      	bx	lr

}
 8000bf8:	bf00      	nop
	...

08000bfc <Stack_InitTasks_Stack>:
 * - PC: Sets the task entry point.
 * - LR: Stores a dummy return address.
 * - General-purpose registers (R0-R12): Initialized to zero.
 * - Saves the stack pointer for each task.
 */
void Stack_InitTasks_Stack() {
 8000bfc:	b490      	push	{r4, r7}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
    uint32 *Local_pu32TaskPSP;
    uint32 Index = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
    uint8 j = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	75fb      	strb	r3, [r7, #23]
    /* Array of task function pointers */
    void (*Local_u32TaskHandle[Max_Tasks_Number])(void) = {
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <Stack_InitTasks_Stack+0x9c>)
 8000c0c:	1d3c      	adds	r4, r7, #4
 8000c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        Task4_Handler
    };


    /* Loop through each task to initialize its stack */
    for (Index = 0u; Index < Max_Tasks_Number; ++Index) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	e035      	b.n	8000c86 <Stack_InitTasks_Stack+0x8a>
        /* Set the task's PSP address */
        Local_pu32TaskPSP = (uint32 *)Task_PSP[Index];
 8000c1a:	4a20      	ldr	r2, [pc, #128]	@ (8000c9c <Stack_InitTasks_Stack+0xa0>)
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	61fb      	str	r3, [r7, #28]

    	/* xPSR Register (Initialize Thumb instruction set) */
    	Local_pu32TaskPSP--;
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3b04      	subs	r3, #4
 8000c28:	61fb      	str	r3, [r7, #28]
    	*Local_pu32TaskPSP = Dummy_xPSR;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c30:	601a      	str	r2, [r3, #0]

        /* PC Register (Task entry point) */
        Local_pu32TaskPSP--;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b04      	subs	r3, #4
 8000c36:	61fb      	str	r3, [r7, #28]
        *Local_pu32TaskPSP = (uint32)Local_u32TaskHandle[Index];
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	3320      	adds	r3, #32
 8000c3e:	443b      	add	r3, r7
 8000c40:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c44:	461a      	mov	r2, r3
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	601a      	str	r2, [r3, #0]


        /* LR Register (Dummy return address) */
        Local_pu32TaskPSP--;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b04      	subs	r3, #4
 8000c4e:	61fb      	str	r3, [r7, #28]
        *Local_pu32TaskPSP = Dummy_LR;
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f06f 0202 	mvn.w	r2, #2
 8000c56:	601a      	str	r2, [r3, #0]


        /* Initialize General-Purpose Registers (R0-R12) */
        for (j = 0; j < 13; j++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	75fb      	strb	r3, [r7, #23]
 8000c5c:	e008      	b.n	8000c70 <Stack_InitTasks_Stack+0x74>
            Local_pu32TaskPSP--;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b04      	subs	r3, #4
 8000c62:	61fb      	str	r3, [r7, #28]
            *Local_pu32TaskPSP = 0;
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
        for (j = 0; j < 13; j++) {
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	75fb      	strb	r3, [r7, #23]
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	2b0c      	cmp	r3, #12
 8000c74:	d9f3      	bls.n	8000c5e <Stack_InitTasks_Stack+0x62>
        }

        /* Save Current PSP of the task for retrieval */
        Task_PSP[Index] = (uint32)Local_pu32TaskPSP;
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <Stack_InitTasks_Stack+0xa0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (Index = 0u; Index < Max_Tasks_Number; ++Index) {
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	3301      	adds	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d9c6      	bls.n	8000c1a <Stack_InitTasks_Stack+0x1e>
    }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3720      	adds	r7, #32
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc90      	pop	{r4, r7}
 8000c96:	4770      	bx	lr
 8000c98:	08000e78 	.word	0x08000e78
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <Enable_FaultException>:
 * - Usage Fault
 *
 * @return Std_ReturnType
 *         - E_OK: Indicates successful enabling of fault exceptions.
 */
Std_ReturnType Enable_FaultException(){
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
    /* Enable Memory Management Fault */
    SET_BIT(SCB->SHCSR, 16);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <Enable_FaultException+0x34>)
 8000ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <Enable_FaultException+0x34>)
 8000caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Enable Bus Fault */
    SET_BIT(SCB->SHCSR, 17);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <Enable_FaultException+0x34>)
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <Enable_FaultException+0x34>)
 8000cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Enable Usage Fault */
    SET_BIT(SCB->SHCSR, 18);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <Enable_FaultException+0x34>)
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <Enable_FaultException+0x34>)
 8000cc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc6:	6253      	str	r3, [r2, #36]	@ 0x24

    return E_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <SavePSP_Value>:

void SavePSP_Value(uint32 Currnt_PSP_value){
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	Task_PSP[Global_Current_Task] = Currnt_PSP_value;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <SavePSP_Value+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <SavePSP_Value+0x24>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000038 	.word	0x20000038
 8000cfc:	20000008 	.word	0x20000008

08000d00 <MemManage_Handler>:
/**
 * @brief Handles Memory Management Fault.
 *
 * This handler is triggered when a memory protection violation occurs.
 */
void MemManage_Handler(){
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
    for(;;);
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:
/**
 * @brief Handles Bus Fault.
 *
 * This handler is triggered when an access to an invalid memory region occurs.
 */
void BusFault_Handler(){
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
    for(;;);
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:
/**
 * @brief Handles Usage Fault.
 *
 * This handler is triggered when an undefined instruction or illegal state is encountered.
 */
void UsageFault_Handler(){
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
    for(;;);
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <main>:
volatile uint8 task2_Tick = 0;
volatile uint8 task3_Tick = 0;
volatile uint8 task4_Tick = 0;

int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	GPIO_u8PinInit(&BUILT_IN_LED);
 8000d1c:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <main+0x34>)
 8000d1e:	f7ff fa71 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8SetPinValue(PORTA, PIN5, PIN_HIGH);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2105      	movs	r1, #5
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fe68 	bl	80009fc <GPIO_u8SetPinValue>

	Enable_FaultException();
 8000d2c:	f7ff ffb8 	bl	8000ca0 <Enable_FaultException>
	SYSTICK_Init();
 8000d30:	f7ff fee0 	bl	8000af4 <SYSTICK_Init>
	Stack_InitScheduler_Stack(SCHED_TASK_STACK);
 8000d34:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <main+0x38>)
 8000d36:	f7ff ff3f 	bl	8000bb8 <Stack_InitScheduler_Stack>
	Stack_InitTasks_Stack();
 8000d3a:	f7ff ff5f 	bl	8000bfc <Stack_InitTasks_Stack>
	ChangeToPSP();
 8000d3e:	f7ff ff4f 	bl	8000be0 <ChangeToPSP>

	Task1_Handler();
 8000d42:	f000 f807 	bl	8000d54 <Task1_Handler>

	/* Loop forever */
	for(;;)
 8000d46:	bf00      	nop
 8000d48:	e7fd      	b.n	8000d46 <main+0x2e>
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	2001f000 	.word	0x2001f000

08000d54 <Task1_Handler>:
	}
}



void Task1_Handler(){
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	while(1){
		TOG_BIT(task1_Tick, 1);
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <Task1_Handler+0x18>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f083 0302 	eor.w	r3, r3, #2
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b01      	ldr	r3, [pc, #4]	@ (8000d6c <Task1_Handler+0x18>)
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e7f6      	b.n	8000d58 <Task1_Handler+0x4>
 8000d6a:	bf00      	nop
 8000d6c:	2000003a 	.word	0x2000003a

08000d70 <Task2_Handler>:
	}

}

void Task2_Handler(){
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	while(1){
		TOG_BIT(task2_Tick, 1);
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <Task2_Handler+0x18>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f083 0302 	eor.w	r3, r3, #2
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b01      	ldr	r3, [pc, #4]	@ (8000d88 <Task2_Handler+0x18>)
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e7f6      	b.n	8000d74 <Task2_Handler+0x4>
 8000d86:	bf00      	nop
 8000d88:	2000003b 	.word	0x2000003b

08000d8c <Task3_Handler>:
	}


}

void Task3_Handler(){
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	while(1){
		TOG_BIT(task3_Tick, 1);
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <Task3_Handler+0x18>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f083 0302 	eor.w	r3, r3, #2
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b01      	ldr	r3, [pc, #4]	@ (8000da4 <Task3_Handler+0x18>)
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e7f6      	b.n	8000d90 <Task3_Handler+0x4>
 8000da2:	bf00      	nop
 8000da4:	2000003c 	.word	0x2000003c

08000da8 <Task4_Handler>:
	}

}

void Task4_Handler(){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	while(1){
		TOG_BIT(task4_Tick, 1);
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <Task4_Handler+0x18>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f083 0302 	eor.w	r3, r3, #2
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b01      	ldr	r3, [pc, #4]	@ (8000dc0 <Task4_Handler+0x18>)
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e7f6      	b.n	8000dac <Task4_Handler+0x4>
 8000dbe:	bf00      	nop
 8000dc0:	2000003d 	.word	0x2000003d

08000dc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000df2:	f000 f811 	bl	8000e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df6:	f7ff ff8f 	bl	8000d18 <main>

08000dfa <LoopForever>:

LoopForever:
  b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   r0, =_estack
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e08:	08000e90 	.word	0x08000e90
  ldr r2, =_sbss
 8000e0c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e10:	20000040 	.word	0x20000040

08000e14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <__libc_init_array>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e50 <__libc_init_array+0x38>)
 8000e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e54 <__libc_init_array+0x3c>)
 8000e1e:	1b64      	subs	r4, r4, r5
 8000e20:	10a4      	asrs	r4, r4, #2
 8000e22:	2600      	movs	r6, #0
 8000e24:	42a6      	cmp	r6, r4
 8000e26:	d109      	bne.n	8000e3c <__libc_init_array+0x24>
 8000e28:	4d0b      	ldr	r5, [pc, #44]	@ (8000e58 <__libc_init_array+0x40>)
 8000e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e5c <__libc_init_array+0x44>)
 8000e2c:	f000 f818 	bl	8000e60 <_init>
 8000e30:	1b64      	subs	r4, r4, r5
 8000e32:	10a4      	asrs	r4, r4, #2
 8000e34:	2600      	movs	r6, #0
 8000e36:	42a6      	cmp	r6, r4
 8000e38:	d105      	bne.n	8000e46 <__libc_init_array+0x2e>
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e40:	4798      	blx	r3
 8000e42:	3601      	adds	r6, #1
 8000e44:	e7ee      	b.n	8000e24 <__libc_init_array+0xc>
 8000e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4a:	4798      	blx	r3
 8000e4c:	3601      	adds	r6, #1
 8000e4e:	e7f2      	b.n	8000e36 <__libc_init_array+0x1e>
 8000e50:	08000e88 	.word	0x08000e88
 8000e54:	08000e88 	.word	0x08000e88
 8000e58:	08000e88 	.word	0x08000e88
 8000e5c:	08000e8c 	.word	0x08000e8c

08000e60 <_init>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	bf00      	nop
 8000e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e66:	bc08      	pop	{r3}
 8000e68:	469e      	mov	lr, r3
 8000e6a:	4770      	bx	lr

08000e6c <_fini>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr
